% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/family.R
\name{poisson_extra}
\alias{poisson_extra}
\title{Family object for fitting log-linear model with potentially unbounded continuous outcome, particularly with Poisson working likelihood}
\usage{
poisson_extra(link = "log", variance = "mu", family = c("gaussian", "poisson"))
}
\arguments{
\item{link}{see \code{\link[stats:family]{family}}. Default to \code{"log"}}

\item{variance}{see \code{\link[stats:family]{family}}. Default to \code{"mu"}, same as Poisson regression.}

\item{family}{The family of the returned family object. Either \code{"gaussian"} or \code{"poisson"}. Default to \code{"gaussian"}. Seems not to matter for glm.}
}
\value{
a family object
}
\description{
A family object for fitting Poisson models (i.e., generalized linear models with range contained in the open unit interval \eqn{(0,\infty)}) with continuous outcomes that may not be non-negative integers. Also works with \code{\link[glmnet:glmnet]{glmnet}}.
}
\details{
This family is useful, for example, when the estimand is a conditional probability function while the outcome is a transformed psudo-outcome so that the estimator is multiply robust, or estimating a positive regression function while the outcome might be negative or non-integers. Naive approaches such as \code{glm(family=poisson())}, \code{glm(family=quasipoisson())}, \code{glm(family=gaussian(link="log"))}, \code{glm(family=quasi(link="log",variance="constant"))} etc. might not work appropriately or reliably in such cases.

Particularly for log-linear model, because of using the Poisson working likelihood and its canonical link, the model fitting is a convex problem and does not depend on starting value.

The output has \code{family="gaussian"} by default to be compatible with other learners in \code{\link[SuperLearner:SuperLearner]{SuperLearner::SuperLearner}}, because when the outcome is continuous, other learners might not perform correctly with \code{family="poisson"}.
}
\section{Warning}{


This function tweaks basic family objects and might remove some safety features. \code{dev.resids} of the family object should not be interpreted as the usual deviance residual for statistical inference, but is -2 times the working log likelihood and only for optimization and model fitting. USE WITH CARE!!!
}

\examples{
set.seed(123)

#########
# negative outcomes
#########
# glm
x <- rnorm(100)
y <- exp(-1 + x) + rnorm(100)
glm(y~x, family = poisson_extra()) # or family=poisson_extra, or family="poisson_extra"
# Errors or not so reliable
\dontrun{
glm(y~x, family = poisson())
glm(y~x, family = quasipoisson())
glm(y~x, family = gaussian(link = "log"))
# setting starting value might work, but is non-convex and requires starting value
glm(y~x, family = gaussian(link = "log"), start = c(-1,0))
glm(y~x, family = quasi(link = "log", variance = "constant"))
# setting starting value might work, but is non-convex and requires starting value
glm(y~x, family = quasi(link = "log", variance = "constant"), start = c(-1,0))
}

#glmnet
X <- matrix(rnorm(100 * 5), nrow = 100)
y <- exp(1 + X[,1]) + rnorm(100)
require(glmnet)
glmnet(X, y, family = poisson_extra())
# or family=poisson_extra; cannot use family="poisson_extra"

# Errors
\dontrun{
glmnet(X, y, family = poisson())
glmnet(X, y, family = gaussian(link = "log"))
glmnet(X, y, family = quasi(link = "log", variance = "constant"))
}

# within SuperLearner
X <- matrix(rnorm(100 * 3), nrow = 100)
y <- exp(1 + X[,1]) + rnorm(10)
require(SuperLearner)
SuperLearner(y, data.frame(X), family=poisson_extra(),
             SL.library = c("SL.glm", "SL.ipredbagg"), cvControl = list(V = 2))
# Error in SL.ipredbagg because of wrong family
\dontrun{
SuperLearner(y, data.frame(X), family = poisson_extra(family = "poisson"),
             SL.library = c("SL.glm", "SL.ipredbagg"), cvControl = list(V = 2))
}


########
# positive non-integer outcomes
########
x <- rnorm(100)
y <- rexp(100, exp(1 - x))
glm(y~x, family = poisson_extra())
# Errors or not so reliable
\dontrun{
glm(y~x, family = poisson())
glm(y~x, family = quasipoisson())
# might work but is non-convex, so may depend on starting value
glm(y~x, family = gaussian(link = "log"))
# might work but is non-convex, so may depend on starting value
glm(y~x, family = quasi(link = "log", variance = "constant"))
}


}
